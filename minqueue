ragma once

/*
Реализация структуры данных Очередь с поддержкой минимума.

Для возможности эффективного получения минимума на всей очереди предлагается реализовать очередь с помощью двух стэков.
Подробности здесь: http://e-maxx.ru/algo/stacks_for_minima

Интерфейс очереди не меняется - как и прежде, в методы передается только одно число. 

*/

#include "minstack.h"

struct minqueue {
	/* опишите поля очереди - используйте два minstack'а */
	minstack* s1;
	minstack* s2;

	minqueue() {
		// конструктор, в котором, возможно, нужно произвести какую-то инициализацию
		s1 = new minstack();
		s2 = new minstack();
	}

	// добавить новый элемент в очередь
	void enqueue(int value) {
		while(s2 -> size()){
			s1 -> push(s2 -> pop());
		}
			s1 -> push(value);
	}

	// удалить первый элемент из очереди, вернуть удаляемое значение
	int dequeue() {
		while(s1 -> size())
				s2 -> push(s1 -> pop());
		return s2 -> pop();
	}

	// вернуть первый элемент из очереди (не удаляя его)
	int first() {
		while(s1 -> size())
			s2 -> push(s1 -> pop());
		return s2 -> top();
	} 
	// размер очереди
	int size() {
		return s1 -> size() + s2 -> size();
	}

	// получить минимальное значение из очереди (не удаляя его)
	int min() {
		while(s1 -> size())
			s1 -> push(s1 -> pop());
		return s2 -> min();
	}

	~minqueue() {
		// деструктор, подчистить память, если это необходимо
		delete[] s1;
		delete[] s2;
	}
};
